name: Typecheck, Lint & Build

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Typecheck
        run: npm run typecheck

      - name: Lint
        run: npm run lint --max-warnings=0

      - name: Build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          ADMIN_BOOTSTRAP_EMAILS: ${{ secrets.ADMIN_BOOTSTRAP_EMAILS }}
          MP_PUBLIC_KEY: ${{ secrets.MP_PUBLIC_KEY }}
          MP_ACCESS_TOKEN: ${{ secrets.MP_ACCESS_TOKEN }}
          NEXT_PUBLIC_MP_ENV: ${{ secrets.NEXT_PUBLIC_MP_ENV }}
          CI: 'true'
        run: npm run build

      - name: Test /api/health handler (built)
        run: |
          node -e "
            const fs = require(\"fs\");
            const path = require(\"path\");
            function walk(dir){
              const out=[];
              for(const e of fs.readdirSync(dir,{withFileTypes:true})){
                const p=path.join(dir,e.name);
                if(e.isDirectory()) out.push(...walk(p)); else out.push(p);
              }
              return out;
            }
            const root = \".next/server\";
            if(!fs.existsSync(root)){ console.log(\"No .next/server; skipping health test\"); process.exit(0); }
            const files = walk(root).filter(p => /app\/api\/health\/.*route.*\.js$/.test(p));
            if(files.length === 0){ console.log(\"No compiled route for /api/health found; skipping\"); process.exit(0); }
            const file = \"./\" + files[0];
            console.log(\"Health route file:\", file);
            const mod = require(file);
            const candidates = [mod && mod.GET, mod && mod.default, mod && mod.handler, mod && mod.handlers && mod.handlers.GET];
            const fn = candidates.find(f => typeof f === \"function\");
            if(!fn){ console.log(\"No callable export in module. Keys:\", Object.keys(mod||{})); process.exit(0); }
            (async () => {
              const res = await fn();
              if(!res || typeof res.json !== \"function\"){ console.log(\"Callable export did not return a Response-like object; skipping\", typeof res); process.exit(0); }
              const data = await res.json();
              if(!data || data.ok !== true){ console.error(\"Health not OK:\", data); process.exit(1); }
              if(!(\"env\" in data)){ console.error(\"Missing env in health payload:\", data); process.exit(1); }
              console.log(\"Health OK:\", data);
            })().catch(e => { console.error(e); process.exit(1); });
          "
