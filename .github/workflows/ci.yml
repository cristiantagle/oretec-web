## Flujo CI en español
## - Usa Secrets del repositorio para todas las variables sensibles.
## - Linter, typecheck, build y prueba del handler /api/health.
## - Nada de dummies si ya hay secrets configurados.

name: CI

on:
  push:
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
      ADMIN_BOOTSTRAP_EMAILS: ${{ secrets.ADMIN_BOOTSTRAP_EMAILS }}
      MP_PUBLIC_KEY: ${{ secrets.MP_PUBLIC_KEY }}
      MP_ACCESS_TOKEN: ${{ secrets.MP_ACCESS_TOKEN }}
      NEXT_PUBLIC_MP_ENV: sandbox
      NEXT_PUBLIC_SITE_URL: https://example.local
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Typecheck
        run: npm run typecheck

      - name: Lint
        run: npm run lint --max-warnings=0

      - name: Build
        run: npm run build

      - name: Test /api/health (handler build)
        run: |
          node -e "
            (async () => {
              const mod = require('./.next/server/app/api/health/route.js');
              const candidates = [mod.GET, mod.default, mod.handler, (mod.handlers && mod.handlers.GET)];
              const h = candidates.find(Boolean);
              if (typeof h !== 'function') { throw new Error('GET no es función en health/route.js'); }
              const res = await h(); const data = await res.json();
              if (!data || data.ok !== true) { throw new Error('Health not OK: ' + JSON.stringify(data)); }
              if (!('env' in data)) { throw new Error('Missing env en payload: ' + JSON.stringify(data)); }
              console.log('Health OK:', data);
            })().catch((e) => { console.error(e); process.exit(1); });
          "
