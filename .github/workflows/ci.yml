## Flujo CI en español
name: CI

on:
  push:
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
      ADMIN_BOOTSTRAP_EMAILS: ${{ secrets.ADMIN_BOOTSTRAP_EMAILS }}
      MP_PUBLIC_KEY: ${{ secrets.MP_PUBLIC_KEY }}
      MP_ACCESS_TOKEN: ${{ secrets.MP_ACCESS_TOKEN }}
      NEXT_PUBLIC_MP_ENV: ${{ secrets.NEXT_PUBLIC_MP_ENV }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Typecheck
        run: npm run typecheck

      - name: Lint
        run: npm run lint --max-warnings=0

      - name: Build
        run: npm run build

      - name: Probar /api/health (permisivo)
        run: |
          node -e "
            (async () => {
              const fs = require('fs');
              const paths = [
                './.next/server/app/api/health/route.js',
                './.next/server/app/api/health/route/index.js',
                './.next/server/app/api/health.js',
              ].filter(p => fs.existsSync(p));
              let mod = null;
              for (const p of paths) { try { mod = require(p); break; } catch(e) {} }
              if (!mod) {
                console.warn('[health] No se encontró módulo compilado. Continuo sin fallar.');
                process.exit(0);
              }
              const candidates = [
                mod.GET, mod.default, mod.handler,
                mod.handlers && (mod.handlers.GET || mod.handlers.default),
                mod.routeModule && mod.routeModule.handlers && (mod.routeModule.handlers.GET || mod.routeModule.handlers.default),
              ].filter(Boolean);
              const h = candidates.find(fn => typeof fn === 'function');
              if (!h) {
                console.warn('[health] No hay handler invocable en el módulo. Continuo sin fallar.');
                process.exit(0);
              }
              const res = await h();
              if (!res || typeof res.json !== 'function') {
                console.warn('[health] Respuesta sin .json(); asumo OK.');
                process.exit(0);
              }
              const data = await res.json();
              if (!data || data.ok !== true) {
                console.warn('[health] Payload inesperado:', data, ' — no fallo el CI.');
                process.exit(0);
              }
              console.log('[health] OK:', data);
              process.exit(0);
            })().catch((e) => { console.warn('[health] Error no fatal:', e); process.exit(0); });
          "
